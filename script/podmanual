#!/usr/bin/perl 

use strict;
use warnings;

use Pod::Manual;
use Getopt::Long;

my $title;
my $output_file = 'manual';
my $format      = 'pdf';

GetOptions(
    'title=s'   => \$title,
    'output=s'  => \$output_file,
    'format=s'  => \$format,
);

my $manual = Pod::Manual->new({ title => $title });

# the chapters are either passed as arguments,
# or taken from STDIN
$manual->add_chapters( @ARGV ? @ARGV : split /\r?\n/, join '', <> );

if ( $format eq 'pdf' ) {
    $output_file =~ s/(\.pdf)?$/.pdf/;  # add .pdf, if missing
    $manual->save_as_pdf( $output_file );
}
elsif ( $format eq 'docbook' ) {
    $output_file .= '.docbook' unless $output_file =~ /\.\w+$/;
    die "$output_file already exists\n" if -e $output_file;
    open my $output_fh, '>', $output_file 
            or die "can't write to $output_file: $!\n";
    print {$output_fh} $manual->as_docbook;
} 
else {
    die "format must be 'pdf' or 'docbook'\n";
}

print "document '$output_file' created\n";

exit;

__END__

=head1 NAME

podmanual - converts pods into docbook or pdf manual

=head1 SYNOPSIS

podmanual [ OPTIONS ] [ module names | pod files ] 
	
=head1 DESCRIPTION

Take the pods given as arguments and generate
a manual out of them. 

The pods can be given as module names or file names. If no
pods are passed as arguments, C<podmanual> will read them from
STDIN, assuming a format of one module name per line.

=head2 OPTIONS

=over

=item -pdf I<filename>

The manual is saved as the pdf file I<filename>.

=item -title I<manual title>

Set the manual title.  If the option is not invoked, 
the name of the first module will be used as the title of
the manual.

=back

=head1 SEE ALSO

L<Pod::Manual>

=head1 BUGS

Please send bug reports to <bug-pod-manual@rt.cpan.org>,
or via the web interface at 
http://rt.cpan.org/Public/Dist/Display.html?Name=Pod-Manual.

=head1 AUTHOR

Yanick Champoux, <yanick@cpan.org>

=cut

